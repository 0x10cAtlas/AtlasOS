; AtlasText - A simple, dummy text editor
:AtlasText
	IAQ 1
	JSR [0x1021] ; clear

	SET I, AtlasText_loop_end ; Calculate the length of the back-jump
	SUB I, AtlasText_loop

	; Register our buffer with the driver
	SET A, AtlasText_input_buffer
	; And ask for exclusive keyboard access
	SET B, 1
	JSR [0x1026] ; keyboard_register

	JSR [0x100f] ; page allocate for large string bufer
	SET [AtlasText_page], A

	SET [AtlasText_input_buffer], 0

	SET C, AtlasText_input_buffer
	SET A, [AtlasText_page]
	SET B, 1024
	SET PUSH, C
	SET PUSH, B
	SET PUSH, A

	JSR mem_clear ; Clear the buffer

	ADD B, A

	SET PUSH, A
	SET A, AtlasText_intro
	JSR text_out
	SET A, POP

	IAQ 0
:AtlasText_loop
	IFE [AtlasText_input_buffer], 0
		SET PC, AtlasText_skip

	; If we hit ESC kill the editor
	IFE [AtlasText_input_buffer], 0x001B
		SET PC, AtlasText_die

	IFE [C], 0x11 ; 13 -> 17 per keyboard HW (enter)
		SET PC, AtlasText_return
	IFE [C], 0x10 ; 8 -> 16 per keyboard HW (backspace)
		SET PC, AtlasText_backspace
	IFG 0x20, [C]
		SET PC, AtlasText_skip
	IFG [C], 0x7F
		SET PC, AtlasText_skip
	IFE A, B
		SET PC, AtlasText_skip

	SET [A], [C]

	; Put the character on-screen so the user can see what is being typed
	; Maybe have this toggleable?
	SET PUSH, A
	SET PUSH, B
	SET B, [A]
	BOR B, 0x7000
	SET A, B
	SET B, [video_cur]
	SET [B], A
	ADD [video_cur], 1
	SET A, [video_width]
	MUL A, [video_height]
	ADD A, [video_mem]
	IFE [video_cur], A
		JSR scroll
	SET B, POP
	SET A, POP
	SET [C], 0
	ADD A, 1

:AtlasText_skip
	; Display the blinking cursor
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	SET A, [video_cur]
	SUB A, [video_mem]
	SET B, 0
	SET C, 0x709F
	JSR char_put
	SET C, POP
	SET B, POP
	SET A, POP


	SET PC, AtlasText_loop

:AtlasText_backspace
	; Remove the blinking cursor
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	SET A, [video_cur]
	SUB A, [video_mem]
	SET B, 0
	SET C, [video_clear]
	JSR char_put
	SET C, POP
	SET B, POP
	SET A, POP

	; Ensure we don't backspace past the beginning
	IFE A, PEEK
		SET PC, AtlasText_skip
	SET PUSH, A

	SET A, [video_mem]
	IFE [video_cur], A
	JSR AtlasText_scrollback

	SET A, POP
	SUB A, 1
	IFE [A], 0xA ; if last character was a new line move cursor back to last printed character
	JSR AtlasText_backspace_newline
	ADD A, 1

	SET PUSH, A
	SET PUSH, B
	SUB [video_cur], 1
	SET B, [video_cur]
	SET [B], 0
	SET B, POP
	SET A, POP
	SUB A, 1
	SET [A], 0
	SET [C], 0
	SET PC, AtlasText_skip

:AtlasText_backspace_newline
	SET PUSH, A
	SET PUSH, B
	SET B, 32
:AtlasText_backspace_newline_loop
	IFE B, 0
	SET PC, AtlasText_backspace_newline_loop_end
	SET A, [video_cur]
	SUB A, 1
	SET A, [A]
	AND A, 0x7f
	IFN A, 0x20
	SET PC, AtlasText_backspace_newline_loop_end
	SUB [video_cur], 1
	SUB B, 1
	SET PC, AtlasText_backspace_newline_loop

:AtlasText_backspace_newline_loop_end
ADD [video_cur], 1
SET B, POP
SET A, POP

SET PC, POP

:AtlasText_scrollback
SET PUSH, PICK 1 ;get in text string and find either position of last newline or 32 characters back, what evers comes first
SET A, PEEK
SET PUSH, B
SET B, 32
:AtlasText_scrollback_loop
IFE B, 0
	SET PC, AtlasText_scrollback_loop_end
IFE [A], 0xA
IFE [AtlasText_newlinefound], 1
SET PC, AtlasText_scrollback_loop_end
IFE [A], 0xA
SET [AtlasText_newlinefound], 1
SUB B, 1
SUB A, 1
IFE A, [AtlasText_page]
SET PC, AtlasText_scrollback_loop_end
SET PC, AtlasText_scrollback_loop


:AtlasText_scrollback_loop_end
SET [video_cur], [video_mem]
IFN [A+1], 0
ADD A, 1
JSR text_out
SET [AtlasText_newlinefound], 0
SET B, POP
SET A, POP
SET [C], 0
SET PC, POP


:AtlasText_return
	; Remove the blinking cursor
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	SET A, [video_cur]
	SUB A, [video_mem]
	SET B, 0
	SET C, [video_clear]
	JSR char_put
	SET C, POP
	SET B, POP
	SET A, POP
	SET [C], 0
	; Add the newline symbol
	SET [A], 0xA
	ADD A, 1
	JSR [0x101f] ; newline
	SET PC, AtlasText_skip


:AtlasText_loop_skip
	JSR [0x1002] ; proc_suspend
	SUB PC, I
:AtlasText_loop_end
:AtlasText_die
	SET A, AtlasText_input_buffer
	IAQ 1
	JSR [0x1027] ; keyboard_unregister
	JSR [0x1021] ; clear
	IAQ 0
	JSR [0x1005] ; proc_kill_me
:AtlasText_data
	:AtlasText_input_buffer dat 0x0000, 0x0000
	:AtlasText_page dat 0x0000
	:AtlasText_intro dat " AtlasText Version 0.1", 0xA, 0x0
	:AtlasText_newlinefound dat 0
:AtlasText_end
