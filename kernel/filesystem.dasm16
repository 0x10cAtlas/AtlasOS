; FILESYSTEM FUNCTIONS
	
; Return start of the filesystem
:filesystem_getfile_table
	SET A, files_table
	SET PC, POP
	
; Returns pointer to start of file entry in file table in C, returns 0 if file not found
; A: buffer containing file name
:filesystem_getfile
	SET PUSH, X
	SET PUSH, B
	SET PUSH, A
	
	SET B, A
	
	JSR filesystem_getfile_table
	SET X, [A] ; Get the number of files in the table
	ADD A, 1 ; Jump down to the start of the table
:filesystem_getfile_loop
	SET C, 0 ; Reset our return
	IFE X, 0 ; Check if we've gone through all of the files
		SET PC, filesystem_getfile_end
	SUB X, 1
	
	ADD A, 2 ; Skip over the directory ID and flags
	JSR strcmp ; Check if the current filename (A) matches the original filename (B)
	IFE C, 0
		SET PC, filesystem_getfile_found
	ADD A, 18 ; Skip over the filename, start, and end
	
	SET PC, filesystem_getfile_loop
:filesystem_getfile_found
	SUB A, 2 ; Backs up the pointer to the start of the file entry
	SET C, A ; Sets C to the start of the entry

:filesystem_getfile_end
	SET A, POP
	SET B, POP
	SET X, POP
	SET PC, POP
	
; Returns pointer to start of file entry in file table in C, returns 0 if file not found
; A: Program start or directory ID
:filesystem_getfile_bystart
	SET PUSH, X
	SET PUSH, B
	SET PUSH, A
	
	SET B, A
	
	JSR filesystem_getfile_table
	SET X, [A] ; Get the number of files in the table
	ADD A, 1 ; Jump down to the start of the table
:filesystem_getfile_bystart_loop
	SET C, 0 ; Reset our return
	IFE X, 0 ; Check if we've gone through all of the files
		SET PC, filesystem_getfile_bystart_end
	SUB X, 1
	
	ADD A, 18 ; Skip over the directory ID, flags, and filename
	IFE B, [A]
		SET PC, filesystem_getfile_bystart_found
	
	ADD A, 2 ; Skip over end and jump to next entry
	
	SET PC, filesystem_getfile_bystart_loop
:filesystem_getfile_bystart_found
	SUB A, 18 ; Backs up the pointer to the start of the file entry
	SET C, A ; Sets C to the start of the entry

:filesystem_getfile_bystart_end
	SET A, POP
	SET B, POP
	SET X, POP
	SET PC, POP
	