:kernel_interrupt_handler
	SET PUSH, EX ; Safety measure in case we trigger between lines that use EX

	SUB A, 1 ; Go from HW+1 to HW

	IFE A, [keyboard_address]
		JSR kernel_interrupt_handler_keyboard
		
	IFE A, [clock_address]
		JSR  kernel_interrupt_handler_clock

	IFE A, [floppy_address]
		JSR kernel_interrupt_handler_floppy
		
	IFE A, 0x1001
		JSR proc_suspend_interrupt
	IFG A, 0x1000
		JSR kernel_interrupt_handler_kernel_call
	
		
	SET EX, POP
	RFI 0

:kernel_interrupt_handler_keyboard
jsr driver_keyboard
	SET PC, POP
	
:kernel_interrupt_handler_clock	
	JSR proc_suspend_interrupt
	
:kernel_interrupt_handler_clock_skip_suspend
	SET PC, POP

:kernel_interrupt_handler_floppy
	JSR driver_floppy_handle_interrupt
	SET PC, POP
	
:kernel_interrupt_handler_kernel_call
SUB A, 0xFFF
ADD A, api_start
SET [kernel_call], [A]
SET A, PICK 2
JSR [kernel_call]
SET PICK 2, A
SET PC, POP

:kernel_call dat 0
; ##################################################
	
; A -> X coordinate
; B -> Y coordinate
; C -> Color
:kernel_interrupt_debug_clock_ticker
	SET PUSH, C
	SET PUSH, B
	SET PUSH, A
	JSR rand
	AND A, 0x007F ; Keep it in range: 0 - 127
	BOR A, C ; Give some color
	SET C, A ; Save the character info
	SET A, POP
	SET B, POP
	JSR char_put
	SET C, POP
	
	SET PC, POP
	