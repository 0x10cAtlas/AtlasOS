; File:    libs.dasm16 
; Author:  Plusmid
; Created: 29-04-2012 18:30
; Description: Routines for loading libraries

; Finds a library in the library list
; A -> Pointer to the name of the library
; A <- Pointer to the entry in library list (or 0x0000 if failed)
:lib_find
	SET PUSH, B
	SET PUSH, C
	
	SET B, lib_table
	
:lib_find_loop		
	ADD B, 1
	
	IFE [0xFFFF + B], 0x0000
		SET PC, lib_find_skip
	
	JSR strcmp
	
	IFE C, 0
		SET PC, lib_find_found

:lib_find_skip
	ADD B, 21
	IFN B, lib_table_end
		SET PC, lib_find_loop
		
	JSR lib_load
	
:lib_find_end
	SET C, POP
	SET B, POP
	SET PC, POP
	
:lib_find_found
	SUB B, 1
	SET A, B
	SET PC, lib_find_end
	
; Find the address of the next free entry in library list
; A <- Address or 0x0000 if failed
:lib_find_free
	SET A, lib_table
	
:lib_find_free_loop
	IFE [A], 0
		SET PC, POP
		
	ADD A, 22
	
	IFN A, lib_table_end
		SET PC, lib_find_free_loop
		
	SET A, 0
	SET PC, POP
	
; Loads a library from a file
; A -> Pointer to the name of the library
; A <- Pointer to the entry in the lib table (or 0x0000 if failed)
:lib_load
	SET PUSH, B
	SET PUSH, C
	SET PUSH, X
	SET PUSH, Y
	SET PUSH, Z
	
	JSR virtual_filesystem_getfile
	SET A, C
	IFE A, 0
		SET PC, lib_load_end		; Could not find library
		
	ADD A, 18
	SET B, [A] ; Start of the file
	
	ADD A, 1
	SET C, [A] ; Read end of the file
	SUB C, B   ; Calculate the lenght of the file
	
	; Check magic number
	IFN [B], 0x4714
		SET PC, lib_load_err
	
	; Todo: Once the big mem pages are implemented: remove this block!
	IFG C, 1024
		SET PC, lib_load_err
	; End of block
	
	JSR page_alloc ; Allocate memory for the library
	IFE A, 0
		SET PC, lib_load_end
	SET Z, A
	
	SET A, B
	SET B, Z
	JSR mem_copy ; Copy the library into its page
	
	ADD B, 1
	IFG [B], 1
		SET PC, lib_load_err_free ; The Library header is too new
	
	ADD B, 2
	SET X, [B] ; Save the length of the header
	
	ADD B, 1 ; Jump to the flags
	SET Y, [B]
	SET Z, Y
	AND Z, 0x000F
	IFE Z, 0
		SET PC, lib_load_err_free
		
	SET Z, Y
	AND Z, 0x0001 ; ART
;	IFN Z, 0
;		SET PC, lib_load_art
	
	; Todo: Implement unified ART parster
	; Todo: Add entry to the lib table
	; Todo: Relocate the LFT
	; Todo: Test!
	
:lib_load_end
	SET X, POP
	SET C, POP
	SET B, POP
	SET PC, POP

:lib_load_err_free
	SET A, B
	JSR page_free
	
:lib_load_err
	SET A, 0
	SET PC, lib_load_end
	
; Adds a new entry into library table and return address of it
; A -> Pointer to library name 
; B -> Pointer to library
; A <- Address of the entry or 0x0000 if failed
:lib_table_add
	SET PUSH, B
	SET PUSH, C
	
	SET C, A
	JSR lib_find_free
	IFE A, 0
		SET PC, lib_table_add_end
		
	SET [A], B
	SET B, A
	ADD B, 1
	SET A, C
	SET C, 19
	JSR strncpy
	
	SET [19 + B], 0
	SET [20 + B], 0
	
	SUB B, 1
	SET A, B
	
:lib_table_add_end
	SET C, POP
	SET B, POP
	SET PC, POP
	
; Deletes an entry from lib table
; A -> Address of the entry to delete
:lib_table_del
	SET PUSH, B
	SET B, 22
	JSR mem_clear
	SET B, POP
	SET PC, POP
	
; Decreases the instance counter of a given library and removes it from memory if the counter reaches 0
; A -> Address of the libraries entry in lib table
:lib_free
	SUB [21 + A], 1
	IFE [21 + A], 0
		JSR lib_unload
	SET PC, POP
	
:lib_free_unload
	JSR lib_unload
	JSR lib_table_del
	SET PC, POP

; Unloads a library from memory (The lib entry remains!!)
; A -> Address of the entry in lib table
:lib_unload
	SET PUSH, B
	SET PUSH, A

	SET A, [A]
	JSR lib_get_function_list	; Call the lib_unload function before unloading library
	IFE A, 0
		SET PC, lib_unload_end
	
	SET B, lib_unload_function
	JSR lib_get_function
	IFN A, 0
		JSR A

	SET A, [PEEK]
	JSR page_free

:lib_unload_end
	SET A, POP
	SET B, POP
	SET PC, POP
	
:lib_unload_function
;	db "lib_unload", 0
	
; Finds a library in the library list
; A -> Pointer to the name of the library
; A <- Pointer to the library (or 0x0000 if failed)
:lib_get_addr
	JSR lib_find
	IFN A, 0
		SET A, [A]
	SET PC, POP
	
; Finds the address of a function in a given library
; A -> Library address
; B -> Name of the function
; A <- Address of the function
:lib_get_function
	SET PUSH, B
	SET PUSH, C
	SET PUSH, X
	SET PUSH, Y
	
	JSR lib_get_function_list
	SET Y, [1+A]
	IFE Y, 0
		SET PC, lib_get_function_error
	ADD A, 2
	
:lib_get_function_loop
	SET X, [A]
	ADD A, 1
	JSR strcmp
	IFE C, 0
		SET PC, lib_get_function_found
		
:lib_get_function_skip_entry
	ADD A, 1
	IFN [A], 0
		SET PC, lib_get_function_skip_entry
		
	SUB Y, 1
	IFN Y, 0
		SET PC, lib_get_function_loop
		
	SET A, 0
	
:lib_get_function_end
	SET Y, POP
	SET X, POP
	SET C, POP
	SET B, POP
	SET PC, POP
	
:lib_get_function_found
	SET A, X
	SET PC, lib_get_function_end
	
:lib_get_function_error
	SET A, 0
	SET PC, lib_get_function_end
	
; Gets the address of the list of library functions
; A -> Address of the library
; A <- Address of the functions table of the library
:lib_get_function_list
	SET PUSH, B
	
	IFN [A], 0x4714	; Missing magic number?
		SET PC, lib_get_function_list_error
		
	ADD A, 4
	SET B, [A]		; Not a library?
	AND B, 0x0010
	IFN B, 0x0010
		SET PC, lib_get_function_list_error
		
	SET B, [A]
	ADD A, 1
	AND B, 0x0001   ; Has got a ART?
	IFE B, 0x0001
		SET PC, lib_get_function_list_skip_art

:lib_get_function_list_end
	SET B, POP
	SET PC, POP
	
:lib_get_function_list_skip_art
	SET B, [A]
	ADD A, B
	ADD A, 1
	SET PC, lib_get_function_list_end
	
:lib_get_function_list_error
	SET A, 0
	SET PC, lib_get_function_list_end

:lib_table
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
	dat 0x0000, "                    ", 0x0000
:lib_table_end
