; ################START BIOS#################

:bios_boot
	HWN Z
	IFE Z, 0 ; Loop indefinitely until we have hardware connected
		SET PC, bios_boot
	
:bios_discover_hardware_loop
	SUB Z, 1
	HWQ Z

	IFE A, 0xF615 ; LEM1802 Monitor (lower 16 bits)
		IFE B, 0x7349 ; LEM1802 Monitor (upper 16 bits)
			JSR bios_display_init
			
	IFE A, 0x7406 ; Generic keyboard (lower 16 bits)
		IFE B, 0x30CF ; Generic keyboard (upper 16 bits)
			JSR bios_keyboard_init
			
	IFE A, 0xB402 ; Generic Clock (lower 16 bits)
		IFE B, 0x12D0 ; Generic Clock (upper 16 bits)
			JSR bios_clock_init
			
	;IFE A, 0x4CAE ; HMD2043 floppy disc drive (lower 16 bits)
	;	IFE B, 0x74FA ; HMD2043 floppy disc drive (upper 16 bits)
	;		JSR bios_floppy_init
			
	IFN Z, 0
		SET PC, bios_discover_hardware_loop

	SET PC, POP


:bios_display_init
	SET [display_address], Z
	
	SET [video_font], [video_mem]
	ADD [video_font], 0x0180
	SET [video_palette], [video_font]
	ADD [video_palette], 0x0100

	; map screen
	SET A, 0
	SET B, [video_mem]
	HWI Z
	; map font
	SET A, 1
	SET B, [video_font]
	HWI Z
	; map palette
	SET A, 2
	SET B, [video_palette]
	HWI Z
	; set border color
	SET A, 3
	SET B, 0x01
	HWI Z
	; dump font
	SET A, 4
	SET B, [video_font]
	HWI Z
	; dump palette
	SET A, 5
	SET B, [video_palette]
	HWI Z
	
	; Reserve video-memory
	SET A, [video_mem]
	JSR page_reserve
	
	; Init the video cursor
	SET [video_cur], [video_mem]

	SET PC, POP

:bios_keyboard_init
	SET [keyboard_address], Z

	SET A, 3
	SET B, [keyboard_address] ; Our magic word to tell the handler we have a keyboard keypress
	ADD B, 1 ; Always use HW+1 so we never pass a 0 to B as that would disable interrupts
	HWI Z

	SET PC, POP

:bios_clock_init
	SET [clock_address], Z

	; Set clock tick rate (60/B = 5/sec)
	SET A, 0
	SET B, 12 ; 5/sec
	HWI [clock_address]

	; Setup interrupts for clock
	SET A, 2
	SET B, [clock_address] ; Our magic word to tell the handler we have a clock tick
	ADD B, 1 ; Always use HW+1 so we never pass a 0 to B as that would disable interrupts
	HWI [clock_address]
	SET [proc_suspend_int], B
	SET PC, POP

:bios_floppy_init
	SET [floppy_address], Z

	;Set interrupts for floppy
	SET A, 5 
	SET B, [floppy_address] ; Our magic word to tell the handler we have a floppy event
	ADD B, 1
	HWI [floppy_address]

	SET A, 0 ; check if media is present
	HWI [floppy_address]
	IFE B, 0
		SET PC, bios_floppy_end

	SET A, 0x0001 ;check media parameters
	HWI [floppy_address]
	SET [floppy_words_per_sector], B
	SET [floppy_sectors], C
	SET [floppy_write_locked], X

	;check media quality
	SET A, 0xFFFF
	HWI [floppy_address]
	SET [floppy_quality], B
	
	; Reserve disk paging space
	SET X, [floppy_paging_address]
	SET Y, X
	ADD Y, [floppy_paging_size]
:bios_floppy_page_reserve
	JSR page_reserve
	ADD X, 512
	IFN X, Y
		SET PC, bios_floppy_page_reserve
:bios_floppy_end
	SET PC, POP

:display_address
dat 0x0000
:video_mem
dat 0xF800
:video_font
dat 0x0000
:video_palette
dat 0x0000
:video_col
dat 0x7000
:video_cur
dat 0x0000
:video_clear
dat 0x7020
:video_width
dat 0x0020
:video_height
dat 0x000C

:keyboard_address
dat 0x0000

:clock_address
dat 0x0000

:floppy_address
dat 0x0000
:floppy_words_per_sector
dat 0x0000
:floppy_sectors
dat 0x0000
:floppy_write_locked
dat 0x0000
:floppy_quality
dat 0x0000
:floppy_paging_address
dat 0xEB00
:floppy_paging_size
dat 0x1000 ; 8 sectors @ 512 words/sector
:floppy_page_inuseflags
dat 0x0000 ; Bit map of RAM pages in use along with flags (4 flag bits per sector)
dat 0x0000 ; Bit 1 - Is active, Bit 2 - ??, Bit 3 - ??, Bit 4 - ??

; ################END BIOS#################

; ############DRIVER FUNCTIONS#############

; START OF THE KEYBOARD DRIVER
:driver_keyboard
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	
	SET A, 1
    HWI [keyboard_address]

	; Skip the driver if the key value is 0
	IFE C, 0
	SET PC, driver_keyboard_end

	SET A, keyboard_buffers

	IFN [keyboard_buffers_exclusive], 0
		SET PC, driver_keyboard_exclusive

:driver_keyboard_loop
	; Check to see if we have a buffer registered at this spot
    IFN [A], 0
        JSR driver_keyboard_save_to_buffer
	; Increment to the next buffer as long as we aren't at the end
    ADD A, 1
    IFN A, keyboard_buffers_end
        SET PC, driver_keyboard_loop
:driver_keyboard_end
	SET A, 0
    HWI [keyboard_address]
	SET C, POP
	SET B, POP
    SET A, POP
    SET PC, POP

:driver_keyboard_exclusive
	SET B, [keyboard_buffers_exclusive]
	SET [B], C
	SET PC, driver_keyboard_end

:driver_keyboard_save_to_buffer
	SET B, [A]
	SET [B], C
	SET PC, POP

; END OF THE KEYBOARD DRIVER

; START OF THE FLOPPY DRIVER

:driver_floppy
	SET PC, POP
	
:driver_floppy_handle_interrupt
	SET PC, POP

; END OF THE FLOPPY DRIVER

; Registers a new keyboard buffer
; Takes:
; A: Address of the buffer
; B: Keyboard buffer flags (right now set to 1 to make buffer exclusive)
:keyboard_register
	SET PUSH, C
	SET PUSH, B
    SET PUSH, A

    SET C, keyboard_buffers

:keyboard_register_loop
    IFE [C], 0
        SET PC, keyboard_register_set
    ADD C, 1
    IFN C, keyboard_buffers_end
        SET PC, keyboard_register_loop

:keyboard_register_set
    SET [C], A
	IFE B, 1
		SET [keyboard_buffers_exclusive], A

:keyboard_register_end
    SET A, POP
	SET B, POP
	SET C, POP
    SET PC, POP


; Unregisters a keyboard buffer
; Takes:
; A: Address of the buffer
:keyboard_unregister
	SET PUSH, B
    SET PUSH, A

    SET B, keyboard_buffers

:keyboard_unregister_loop
    IFE [B], A
        SET PC, keyboard_unregister_unset
    ADD B, 1
    IFN B, keyboard_buffers_end
        SET PC, keyboard_unregister_loop
	SET PC, keyboard_unregister_end
:keyboard_unregister_unset
    SET [B], 0x0000

	; If this is the exclusive buffer, reset the exclusive global flag
	IFE A, [keyboard_buffers_exclusive]
		JSR keyboard_unregister_exclusive

:keyboard_unregister_end
    SET A, POP
	SET B, POP
    SET PC, POP

:keyboard_unregister_exclusive
; clear the exclusive data
	SET [keyboard_buffers_exclusive], 0
	SET PC, POP

; Returns whether there is an exclusive keyboard buffer active
:keyboard_is_exclusive_active
	SET A, 0
	IFN [keyboard_buffers_exclusive], 0
		SET A, 1
	SET PC, POP

; Wipes out all of the registered keyboard buffers
; CAUTION! This make break other running applications
:keyboard_unregister_all
	SET PUSH, A
	SET A, keyboard_buffers
:keyboard_unregister_all_loop
	IFE A, keyboard_buffers_end
		SET PC, keyboard_unregister_all_end
	SET [A], 0
	ADD A, 1
	SET PC, keyboard_unregister_all_loop
:keyboard_unregister_all_end
	SET A, POP
	SET PC, POP
	
; ########### END DRIVER FUNCTIONS##########
